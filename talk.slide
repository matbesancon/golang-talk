Go dans une équipe multi-projet, multi-plateforme
18:30 06 Jul 2017
Tags: data, gomobile, backend

Mathieu Besançon
Data Scientist & Backend Developer, Equisense
@MathieuBesancon
https://medium.com/@MathieuBesancon

* De quoi on parle?

1. Introduction & contexte
2. Go à taille réelle en multi-plateforme
3. Go en data science

* Slide

- Background en process, systèmes industriels et calcul scientifique

- [Matlab, Scilab] [C/C++] [Python, Numpy, Pandas] [Scala] [Go]

- Intérêt pour la programmation fonctionnelle et scientifique

- Préférence pour l'exploration poussée sans trop m'appuyer sur des outils automagiques

* Contexte d'Equisense

Développe des objets connectés et services pour les cavaliers.

Utilisation de données accélérométriques pour analyser et faire un retour sur les séances (nombre de sauts, temps à chaque allure,..)

*Role*: traitement de signal, analyse de données et modélisation, développement backend

Culture technique:

- Autonomie mais forte interdépendance
- Chacun est responsable de ses projets
- Influence de backgrounds hardware/firmware, data et design

* Go à taille réelle en multi-plateforme

* Pourquoi Go pour notre équipe ?

Utilisation d'un Backend-As-A-Service au-delà de son scope et capacités
==> Woops, énorme dette technique, besoin de développement d'une vraie plateforme

Après exploration de plusieurs options, choix de Go pour quelques raisons clés

- Facilité de lecture par une majorité de développeurs
- Empreinte mémoire faible
- Refactoring facile, prédictible
- Autoritaire sur les détails, flexible sur les vrais choix
- Pensé comme un langage natif serveur (cloud-native)

* Besoins anticipés

Nouvelles fonctionnalités à développer:
- Calcul de tendance à long-terme pour le cavalier
- News feed
- Interactions sociales

Centralisation des modèles et de la logique centraux
- Utilisation des bindings gomobile
- Utilisabilité pour objets connectés (sans être du métal nu)

* Architecture des packages et services
.image img/architecture.png 450 _

* Développement d'applications serveur et client

Library-driven development: séparation de la *logique* des *services*

Exemples:
- `model` est utilisé dans chaque service écrit en Go
- `aggregation` peut être compilé à la fois pour le backend et les applications mobiles

Cas d'usage: certains algorithmes tournent par défaut sur serveurs, mais
les apps mobile doivent pouvoir les utiliser (cas hors connexion)

.image img/pipeline.png _ 800

* Go pour la data science

* Les parties cool

Première surprise : un langage plutôt bas-niveau, orienté système avec une
communauté data et techniques numériques très active

Channel `#data-science` sur le Slack Gophers

L'organisation Github `gonum` maintient d'excellents packages scientifiques

`gorgiona` pour les graphes de calcul génériques (~ TensorFlow)

pachyderm.io pour la data science containerisée et versionnée

Système de test intégré au tooling : propriétés prédictibles du modèle
(bonne pratique dans une communauté data pas encore acculturée à la production)

* Les parties 6@#8%ù**£

Exemple en Julia

.image img/julia_example.png _ 550

* Comportement des types numériques:

Ce que je voudrais voir:

  a := float64(0.5)
  b := float32(1.5)
  x := a + b
  // x is a float64

  var y float32
  y = a + b // invalid operation: a + b (mismatched types float64 and float32)

En réalité:

  a := float64(0.5)
  b := float32(1.5)
  x := a + b // invalid operation: a + b (mismatched types float64 and float32)

* La goutte d'eau

- Pas de type `numeric` utilisable pour définir les fonctions

  func add(a, b numeric) {
    return a + b
  }

- Pas d'interface définissable sur les opérateurs

  type adder interface{
    +(float32) adder
  }

* Mini-projet: KNN pour la détection de questions dupliquées sur Quora

.image img/quora-duplicates.png _ 450

Compétition Kaggle :
.link https://www.kaggle.com/c/quora-question-pairs

Objectifs :
- Pré-traitement des données et textes bruts des questions
- Implémentation d'une version "sparse" de l'algorithme des K plus proches voisins
