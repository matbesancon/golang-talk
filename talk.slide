Weird use cases for Golang
18:30 06 Jul 2017
Tags: data, gomobile, backend

Mathieu Besançon
Data Scientist & Backend Developer, Equisense
@MathieuBesancon
https://medium.com/@MathieuBesancon

* Outline

1. Introduction
2. Go for multi-project, multi-platform development
3. Go for data science

* Ego slide

- Process & industrial engineering, scientific computation background

- [Matlab, Scilab] [C/C++] [Python, Numpy, Pandas] [Scala] [Go]

- Interest in functional programming, scientific-enabled languages

- But I like to explore and work on my own without relying (too much) on magic

* Equisense’s context

Offering smart devices and services for horse riders.

Currently focusing on the sport aspects (jumping, ...)

*Role*: signal processing, data analysis, backend development

Technical culture:

- Autonomy but strong interdependence
- Everyone responsible for their own projects
- Influence from hardware/firmware, data and design

* Go for multi-project, multi-platform development

* Why Go for our team?

Use of a Backend-As-a-Service beyond its capability
==> Woops, we need to rewrite (at least) some things in-house

Explored several options for the new platform

Golang:
- Emphasis on ease of read
- Foreseeable refactoring
- Small memory footprint
- Designed for server-side applications
- Enforcing good practices (limited scopes, consistent code)

* Projected needs

Extension of features:
- Computation of long-term trends
- News feed
- Social interactions

Centralization of the core models and logic
- Leveraging gomobile bindings
- Usability for connected devices (but not bare metal)

* Packages and services architecture
.image img/architecture.png 450 _

* Developing for server and client application

Library-driven development: split reused *logic* from *services*

Examples:
- `model` is used in every service written in Go
- `aggregation` can be compiled for the back-end and both mobile platforms

Use case: algorithms run online by default, but mobile apps should be able
to run them when requested (no internet, ...)

.image img/pipeline.png _ 800

* Go for data science

* The good parts

First surprise: a low-level, system-oriented language with a very active
data science community.

`#data-science` channel on the Gophers Slack

`gonum` organization offers high-quality scientific packages

`gorgiona` for generic computation graph (think TensorFlow)

pachyderm.io for containerized and versioned data science

Built-in advanced testing system helps predicting the outcome of a model
under given conditions.

Testing is not yet enforced enough in the data science circle when moving to
production.

* The 6@#8%ù**£ parts

Example in Julia
.image img/julia_example.png _ 300

* Numeric type behavior:

What I wish we had:

  a := float64(0.5)
  b := float32(1.5)
  x := a + b
  // x is a float64

  var y int
  y = a + b // invalid operation: a + b (mismatched types float64 and float32)

What we have:

  a := float64(0.5)
  b := float32(1.5)
  x := a + b // invalid operation: a + b (mismatched types float64 and float32)

* The fatal blow

- No generic `numeric` type

  func add(a, b numeric) {
    return a + b
  }

- No interface can be defined on operators

  type adder interface{
    +(float32) adder
  }

* Mini-project: KNN for Quora duplicate questions detection

.image img/quora-duplicates.png _ 450

Kaggle competition:
.link https://www.kaggle.com/c/quora-question-pairs

Goals:
- heavy lifting on raw question data
- implementation of a sparse version of the K-nearest neighbors
